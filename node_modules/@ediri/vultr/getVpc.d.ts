import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * Get information about a Vultr VPC.
 *
 * ## Example Usage
 *
 * Get the information for a VPC by `description`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const myVpc = vultr.getVpc({
 *     filters: [{
 *         name: "description",
 *         values: ["my-vpc-description"],
 *     }],
 * });
 * ```
 */
export declare function getVpc(args?: GetVpcArgs, opts?: pulumi.InvokeOptions): Promise<GetVpcResult>;
/**
 * A collection of arguments for invoking getVpc.
 */
export interface GetVpcArgs {
    /**
     * Query parameters for finding VPCs.
     */
    filters?: inputs.GetVpcFilter[];
}
/**
 * A collection of values returned by getVpc.
 */
export interface GetVpcResult {
    /**
     * The date the VPC was added to your Vultr account.
     */
    readonly dateCreated: string;
    /**
     * The VPC's description.
     */
    readonly description: string;
    readonly filters?: outputs.GetVpcFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of the region that the VPC is in.
     */
    readonly region: string;
    /**
     * The IPv4 network address. For example: 10.1.1.0.
     */
    readonly v4Subnet: string;
    /**
     * The number of bits for the netmask in CIDR notation. Example: 20
     */
    readonly v4SubnetMask: number;
}
/**
 * Get information about a Vultr VPC.
 *
 * ## Example Usage
 *
 * Get the information for a VPC by `description`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const myVpc = vultr.getVpc({
 *     filters: [{
 *         name: "description",
 *         values: ["my-vpc-description"],
 *     }],
 * });
 * ```
 */
export declare function getVpcOutput(args?: GetVpcOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVpcResult>;
/**
 * A collection of arguments for invoking getVpc.
 */
export interface GetVpcOutputArgs {
    /**
     * Query parameters for finding VPCs.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetVpcFilterArgs>[]>;
}
