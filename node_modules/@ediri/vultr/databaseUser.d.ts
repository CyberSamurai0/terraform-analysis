import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * Provides a Vultr database user resource. This can be used to create, read, modify, and delete users for a managed database on your Vultr account.
 *
 * ## Example Usage
 *
 * Create a new database user:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myDatabaseUser = new vultr.DatabaseUser("myDatabaseUser", {
 *     databaseId: vultr_database.my_database.id,
 *     username: "my_database_user",
 *     password: "randomTestPW40298",
 * });
 * ```
 */
export declare class DatabaseUser extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseUserState, opts?: pulumi.CustomResourceOptions): DatabaseUser;
    /**
     * Returns true if the given object is an instance of DatabaseUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DatabaseUser;
    readonly accessCert: pulumi.Output<string>;
    readonly accessControl: pulumi.Output<outputs.DatabaseUserAccessControl>;
    readonly accessKey: pulumi.Output<string>;
    /**
     * The managed database ID you want to attach this user to.
     */
    readonly databaseId: pulumi.Output<string>;
    /**
     * The encryption type of the new managed database user's password (MySQL engine types only - `cachingSha2Password`, `mysqlNativePassword`).
     */
    readonly encryption: pulumi.Output<string>;
    /**
     * The password of the new managed database user.
     */
    readonly password: pulumi.Output<string>;
    /**
     * The permission level for the database user (Kafka engine types only - `admin`, `read`, `write`, `readwrite`).
     */
    readonly permission: pulumi.Output<string>;
    /**
     * The username of the new managed database user.
     */
    readonly username: pulumi.Output<string>;
    /**
     * Create a DatabaseUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseUserArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering DatabaseUser resources.
 */
export interface DatabaseUserState {
    accessCert?: pulumi.Input<string>;
    accessControl?: pulumi.Input<inputs.DatabaseUserAccessControl>;
    accessKey?: pulumi.Input<string>;
    /**
     * The managed database ID you want to attach this user to.
     */
    databaseId?: pulumi.Input<string>;
    /**
     * The encryption type of the new managed database user's password (MySQL engine types only - `cachingSha2Password`, `mysqlNativePassword`).
     */
    encryption?: pulumi.Input<string>;
    /**
     * The password of the new managed database user.
     */
    password?: pulumi.Input<string>;
    /**
     * The permission level for the database user (Kafka engine types only - `admin`, `read`, `write`, `readwrite`).
     */
    permission?: pulumi.Input<string>;
    /**
     * The username of the new managed database user.
     */
    username?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a DatabaseUser resource.
 */
export interface DatabaseUserArgs {
    accessControl?: pulumi.Input<inputs.DatabaseUserAccessControl>;
    /**
     * The managed database ID you want to attach this user to.
     */
    databaseId: pulumi.Input<string>;
    /**
     * The encryption type of the new managed database user's password (MySQL engine types only - `cachingSha2Password`, `mysqlNativePassword`).
     */
    encryption?: pulumi.Input<string>;
    /**
     * The password of the new managed database user.
     */
    password?: pulumi.Input<string>;
    /**
     * The permission level for the database user (Kafka engine types only - `admin`, `read`, `write`, `readwrite`).
     */
    permission?: pulumi.Input<string>;
    /**
     * The username of the new managed database user.
     */
    username: pulumi.Input<string>;
}
