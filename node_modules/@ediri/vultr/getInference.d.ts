import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * Get information about a Vultr Serverless Inference subscription.
 *
 * ## Example Usage
 *
 * Get the information for an inference subscription by `label`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const exampleInference = vultr.getInference({
 *     filters: [{
 *         name: "label",
 *         values: ["my_inference_label"],
 *     }],
 * });
 * ```
 */
export declare function getInference(args?: GetInferenceArgs, opts?: pulumi.InvokeOptions): Promise<GetInferenceResult>;
/**
 * A collection of arguments for invoking getInference.
 */
export interface GetInferenceArgs {
    /**
     * Query parameters for finding inference subscriptions.
     */
    filters?: inputs.GetInferenceFilter[];
}
/**
 * A collection of values returned by getInference.
 */
export interface GetInferenceResult {
    /**
     * The inference subscription's API key for accessing the Vultr Inference API.
     */
    readonly apiKey: string;
    /**
     * The date the inference subscription was added to your Vultr account.
     */
    readonly dateCreated: string;
    readonly filters?: outputs.GetInferenceFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The inference subscription's label.
     */
    readonly label: string;
    readonly usage: {
        [key: string]: string;
    };
}
/**
 * Get information about a Vultr Serverless Inference subscription.
 *
 * ## Example Usage
 *
 * Get the information for an inference subscription by `label`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const exampleInference = vultr.getInference({
 *     filters: [{
 *         name: "label",
 *         values: ["my_inference_label"],
 *     }],
 * });
 * ```
 */
export declare function getInferenceOutput(args?: GetInferenceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInferenceResult>;
/**
 * A collection of arguments for invoking getInference.
 */
export interface GetInferenceOutputArgs {
    /**
     * Query parameters for finding inference subscriptions.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetInferenceFilterArgs>[]>;
}
