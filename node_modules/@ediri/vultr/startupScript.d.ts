import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a Vultr Startup Script resource. This can be used to create, read, modify, and delete Startup Scripts.
 *
 * ## Example Usage
 *
 * Create a new Startup Script
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myScript = new vultr.StartupScript("myScript", {script: "ZWNobyAkUEFUSAo="});
 * ```
 *
 * ## Import
 *
 * Startup Scripts can be imported using the Startup Scripts `ID`, e.g.
 *
 * ```sh
 * $ pulumi import vultr:index/startupScript:StartupScript my_script ff8f36a8-eb86-4b8d-8667-b9d5459b6390
 * ```
 */
export declare class StartupScript extends pulumi.CustomResource {
    /**
     * Get an existing StartupScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StartupScriptState, opts?: pulumi.CustomResourceOptions): StartupScript;
    /**
     * Returns true if the given object is an instance of StartupScript.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is StartupScript;
    /**
     * Date the script was created.
     */
    readonly dateCreated: pulumi.Output<string>;
    /**
     * Date the script was last modified.
     */
    readonly dateModified: pulumi.Output<string>;
    /**
     * Name of the given script.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Contents of the startup script base64 encoded.
     */
    readonly script: pulumi.Output<string>;
    /**
     * Type of startup script. Possible values are boot or pxe - default is boot.
     */
    readonly type: pulumi.Output<string | undefined>;
    /**
     * Create a StartupScript resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StartupScriptArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering StartupScript resources.
 */
export interface StartupScriptState {
    /**
     * Date the script was created.
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * Date the script was last modified.
     */
    dateModified?: pulumi.Input<string>;
    /**
     * Name of the given script.
     */
    name?: pulumi.Input<string>;
    /**
     * Contents of the startup script base64 encoded.
     */
    script?: pulumi.Input<string>;
    /**
     * Type of startup script. Possible values are boot or pxe - default is boot.
     */
    type?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a StartupScript resource.
 */
export interface StartupScriptArgs {
    /**
     * Name of the given script.
     */
    name?: pulumi.Input<string>;
    /**
     * Contents of the startup script base64 encoded.
     */
    script: pulumi.Input<string>;
    /**
     * Type of startup script. Possible values are boot or pxe - default is boot.
     */
    type?: pulumi.Input<string>;
}
