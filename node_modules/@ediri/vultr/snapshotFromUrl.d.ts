import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a Vultr Snapshots from URL resource. This can be used to create, read, modify, and delete Snapshots from URL.
 *
 * ## Example Usage
 *
 * Create a new Snapshots from URL
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const mySnapshot = new vultr.SnapshotFromUrl("mySnapshot", {url: "http://dl-cdn.alpinelinux.org/alpine/v3.9/releases/x86_64/alpine-virt-3.9.1-x86_64.iso"});
 * ```
 *
 * ## Import
 *
 * Snapshots from Url can be imported using the Snapshot `ID`, e.g.
 *
 * ```sh
 * $ pulumi import vultr:index/snapshotFromUrl:SnapshotFromUrl my_snapshot e60dc0a2-9313-4bab-bffc-57ffe33d99f6
 * ```
 */
export declare class SnapshotFromUrl extends pulumi.CustomResource {
    /**
     * Get an existing SnapshotFromUrl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotFromUrlState, opts?: pulumi.CustomResourceOptions): SnapshotFromUrl;
    /**
     * Returns true if the given object is an instance of SnapshotFromUrl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SnapshotFromUrl;
    /**
     * The app id which the snapshot is associated with.
     */
    readonly appId: pulumi.Output<number>;
    /**
     * The date the snapshot was created.
     */
    readonly dateCreated: pulumi.Output<string>;
    /**
     * The description for the given snapshot.
     */
    readonly description: pulumi.Output<string>;
    /**
     * The os id which the snapshot is associated with.
     */
    readonly osId: pulumi.Output<number>;
    /**
     * The size of the snapshot in Bytes.
     */
    readonly size: pulumi.Output<number>;
    /**
     * The status for the given snapshot.
     */
    readonly status: pulumi.Output<string>;
    /**
     * URL of the given resource you want to create a snapshot from.
     */
    readonly url: pulumi.Output<string>;
    /**
     * Create a SnapshotFromUrl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotFromUrlArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering SnapshotFromUrl resources.
 */
export interface SnapshotFromUrlState {
    /**
     * The app id which the snapshot is associated with.
     */
    appId?: pulumi.Input<number>;
    /**
     * The date the snapshot was created.
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * The description for the given snapshot.
     */
    description?: pulumi.Input<string>;
    /**
     * The os id which the snapshot is associated with.
     */
    osId?: pulumi.Input<number>;
    /**
     * The size of the snapshot in Bytes.
     */
    size?: pulumi.Input<number>;
    /**
     * The status for the given snapshot.
     */
    status?: pulumi.Input<string>;
    /**
     * URL of the given resource you want to create a snapshot from.
     */
    url?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a SnapshotFromUrl resource.
 */
export interface SnapshotFromUrlArgs {
    /**
     * URL of the given resource you want to create a snapshot from.
     */
    url: pulumi.Input<string>;
}
