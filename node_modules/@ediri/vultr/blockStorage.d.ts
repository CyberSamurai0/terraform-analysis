import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a Vultr Block Storage resource. This can be used to create, read, modify, and delete Block Storage.
 *
 * ## Example Usage
 *
 * Create a new Block Storage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myBlockstorage = new vultr.BlockStorage("myBlockstorage", {
 *     label: "vultr-block-storage",
 *     region: "ewr",
 *     sizeGb: 10,
 * });
 * ```
 *
 * ## Import
 *
 * Block Storage can be imported using the Block Storage `ID`, e.g.
 *
 * ```sh
 * $ pulumi import vultr:index/blockStorage:BlockStorage my_blockstorage e315835e-d466-4e89-9b4c-dfd8788d7685
 * ```
 */
export declare class BlockStorage extends pulumi.CustomResource {
    /**
     * Get an existing BlockStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockStorageState, opts?: pulumi.CustomResourceOptions): BlockStorage;
    /**
     * Returns true if the given object is an instance of BlockStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is BlockStorage;
    /**
     * VPS ID that you want to have this block storage attached to.
     */
    readonly attachedToInstance: pulumi.Output<string | undefined>;
    /**
     * Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `highPerf` or `storageOpt`.
     */
    readonly blockType: pulumi.Output<string>;
    /**
     * The monthly cost of this block storage.
     */
    readonly cost: pulumi.Output<number>;
    /**
     * The date this block storage was created.
     */
    readonly dateCreated: pulumi.Output<string>;
    /**
     * Label that is given to your block storage.
     */
    readonly label: pulumi.Output<string | undefined>;
    /**
     * Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
     */
    readonly live: pulumi.Output<boolean | undefined>;
    /**
     * An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
     */
    readonly mountId: pulumi.Output<string>;
    /**
     * Region in which this block storage will reside in. (Currently only NJ/NY supported region "ewr")
     */
    readonly region: pulumi.Output<string>;
    /**
     * The size of the given block storage.
     */
    readonly sizeGb: pulumi.Output<number>;
    /**
     * Current status of your block storage.
     */
    readonly status: pulumi.Output<string>;
    /**
     * Create a BlockStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockStorageArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering BlockStorage resources.
 */
export interface BlockStorageState {
    /**
     * VPS ID that you want to have this block storage attached to.
     */
    attachedToInstance?: pulumi.Input<string>;
    /**
     * Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `highPerf` or `storageOpt`.
     */
    blockType?: pulumi.Input<string>;
    /**
     * The monthly cost of this block storage.
     */
    cost?: pulumi.Input<number>;
    /**
     * The date this block storage was created.
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * Label that is given to your block storage.
     */
    label?: pulumi.Input<string>;
    /**
     * Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
     */
    live?: pulumi.Input<boolean>;
    /**
     * An ID associated with the instance, when mounted the ID can be found in /dev/disk/by-id prefixed with virtio.
     */
    mountId?: pulumi.Input<string>;
    /**
     * Region in which this block storage will reside in. (Currently only NJ/NY supported region "ewr")
     */
    region?: pulumi.Input<string>;
    /**
     * The size of the given block storage.
     */
    sizeGb?: pulumi.Input<number>;
    /**
     * Current status of your block storage.
     */
    status?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a BlockStorage resource.
 */
export interface BlockStorageArgs {
    /**
     * VPS ID that you want to have this block storage attached to.
     */
    attachedToInstance?: pulumi.Input<string>;
    /**
     * Determines on the type of block storage volume that will be created. Soon to become a required parameter. Options are `highPerf` or `storageOpt`.
     */
    blockType?: pulumi.Input<string>;
    /**
     * Label that is given to your block storage.
     */
    label?: pulumi.Input<string>;
    /**
     * Boolean value that will allow attachment of the volume to an instance without a restart. Default is false.
     */
    live?: pulumi.Input<boolean>;
    /**
     * Region in which this block storage will reside in. (Currently only NJ/NY supported region "ewr")
     */
    region: pulumi.Input<string>;
    /**
     * The size of the given block storage.
     */
    sizeGb: pulumi.Input<number>;
}
