import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * Get information about an ISO file offered in the Vultr ISO library.
 *
 * ## Example Usage
 *
 * Get the information for a ISO file by `description`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const myIso = vultr.getIsoPublic({
 *     filters: [{
 *         name: "description",
 *         values: ["iso-description"],
 *     }],
 * });
 * ```
 */
export declare function getIsoPublic(args?: GetIsoPublicArgs, opts?: pulumi.InvokeOptions): Promise<GetIsoPublicResult>;
/**
 * A collection of arguments for invoking getIsoPublic.
 */
export interface GetIsoPublicArgs {
    /**
     * Query parameters for finding ISO files.
     */
    filters?: inputs.GetIsoPublicFilter[];
}
/**
 * A collection of values returned by getIsoPublic.
 */
export interface GetIsoPublicResult {
    /**
     * The description of the ISO file.
     */
    readonly description: string;
    readonly filters?: outputs.GetIsoPublicFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The MD5Sum of the ISO file.
     */
    readonly md5sum: string;
    /**
     * The ISO file's name.
     */
    readonly name: string;
}
/**
 * Get information about an ISO file offered in the Vultr ISO library.
 *
 * ## Example Usage
 *
 * Get the information for a ISO file by `description`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const myIso = vultr.getIsoPublic({
 *     filters: [{
 *         name: "description",
 *         values: ["iso-description"],
 *     }],
 * });
 * ```
 */
export declare function getIsoPublicOutput(args?: GetIsoPublicOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIsoPublicResult>;
/**
 * A collection of arguments for invoking getIsoPublic.
 */
export interface GetIsoPublicOutputArgs {
    /**
     * Query parameters for finding ISO files.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetIsoPublicFilterArgs>[]>;
}
