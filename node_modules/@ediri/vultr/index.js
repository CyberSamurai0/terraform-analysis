"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLoadBalancerOutput = exports.getLoadBalancer = exports.getKubernetesOutput = exports.getKubernetes = exports.getIsoPublicOutput = exports.getIsoPublic = exports.getIsoPrivateOutput = exports.getIsoPrivate = exports.getInstancesOutput = exports.getInstances = exports.getInstanceIpv4Output = exports.getInstanceIpv4 = exports.getInstanceOutput = exports.getInstance = exports.getInferenceOutput = exports.getInference = exports.getFirewallGroupOutput = exports.getFirewallGroup = exports.getDnsDomainOutput = exports.getDnsDomain = exports.getDatabaseOutput = exports.getDatabase = exports.getContainerRegistryOutput = exports.getContainerRegistry = exports.getBlockStorageOutput = exports.getBlockStorage = exports.getBareMetalServerOutput = exports.getBareMetalServer = exports.getBareMetalPlanOutput = exports.getBareMetalPlan = exports.getBackupOutput = exports.getBackup = exports.getApplicationOutput = exports.getApplication = exports.getAccountOutput = exports.getAccount = exports.FirewallRule = exports.FirewallGroup = exports.DnsRecord = exports.DnsDomain = exports.DatabaseUser = exports.DatabaseTopic = exports.DatabaseReplica = exports.DatabaseQuota = exports.DatabaseDb = exports.DatabaseConnectionPool = exports.Database = exports.ContainerRegistry = exports.BlockStorage = exports.BareMetalServer = void 0;
exports.types = exports.config = exports.Vpc2 = exports.Vpc = exports.User = exports.StartupScript = exports.SSHKey = exports.SnapshotFromUrl = exports.Snapshot = exports.ReverseIpv6 = exports.ReverseIpv4 = exports.ReservedIp = exports.Provider = exports.ObjectStorage = exports.LoadBalancer = exports.KubernetesNodePools = exports.Kubernetes = exports.IsoPrivate = exports.InstanceIpv4 = exports.Instance = exports.Inference = exports.getVpc2Output = exports.getVpc2 = exports.getVpcOutput = exports.getVpc = exports.getUserOutput = exports.getUser = exports.getStartupScriptOutput = exports.getStartupScript = exports.getSshKeyOutput = exports.getSshKey = exports.getSnapshotOutput = exports.getSnapshot = exports.getReverseIpv6Output = exports.getReverseIpv6 = exports.getReverseIpv4Output = exports.getReverseIpv4 = exports.getReservedIpOutput = exports.getReservedIp = exports.getRegionOutput = exports.getRegion = exports.getPlanOutput = exports.getPlan = exports.getOsOutput = exports.getOs = exports.getObjectStorageClusterOutput = exports.getObjectStorageCluster = exports.getObjectStorageOutput = exports.getObjectStorage = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.BareMetalServer = null;
utilities.lazyLoad(exports, ["BareMetalServer"], () => require("./bareMetalServer"));
exports.BlockStorage = null;
utilities.lazyLoad(exports, ["BlockStorage"], () => require("./blockStorage"));
exports.ContainerRegistry = null;
utilities.lazyLoad(exports, ["ContainerRegistry"], () => require("./containerRegistry"));
exports.Database = null;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));
exports.DatabaseConnectionPool = null;
utilities.lazyLoad(exports, ["DatabaseConnectionPool"], () => require("./databaseConnectionPool"));
exports.DatabaseDb = null;
utilities.lazyLoad(exports, ["DatabaseDb"], () => require("./databaseDb"));
exports.DatabaseQuota = null;
utilities.lazyLoad(exports, ["DatabaseQuota"], () => require("./databaseQuota"));
exports.DatabaseReplica = null;
utilities.lazyLoad(exports, ["DatabaseReplica"], () => require("./databaseReplica"));
exports.DatabaseTopic = null;
utilities.lazyLoad(exports, ["DatabaseTopic"], () => require("./databaseTopic"));
exports.DatabaseUser = null;
utilities.lazyLoad(exports, ["DatabaseUser"], () => require("./databaseUser"));
exports.DnsDomain = null;
utilities.lazyLoad(exports, ["DnsDomain"], () => require("./dnsDomain"));
exports.DnsRecord = null;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));
exports.FirewallGroup = null;
utilities.lazyLoad(exports, ["FirewallGroup"], () => require("./firewallGroup"));
exports.FirewallRule = null;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));
exports.getAccount = null;
exports.getAccountOutput = null;
utilities.lazyLoad(exports, ["getAccount", "getAccountOutput"], () => require("./getAccount"));
exports.getApplication = null;
exports.getApplicationOutput = null;
utilities.lazyLoad(exports, ["getApplication", "getApplicationOutput"], () => require("./getApplication"));
exports.getBackup = null;
exports.getBackupOutput = null;
utilities.lazyLoad(exports, ["getBackup", "getBackupOutput"], () => require("./getBackup"));
exports.getBareMetalPlan = null;
exports.getBareMetalPlanOutput = null;
utilities.lazyLoad(exports, ["getBareMetalPlan", "getBareMetalPlanOutput"], () => require("./getBareMetalPlan"));
exports.getBareMetalServer = null;
exports.getBareMetalServerOutput = null;
utilities.lazyLoad(exports, ["getBareMetalServer", "getBareMetalServerOutput"], () => require("./getBareMetalServer"));
exports.getBlockStorage = null;
exports.getBlockStorageOutput = null;
utilities.lazyLoad(exports, ["getBlockStorage", "getBlockStorageOutput"], () => require("./getBlockStorage"));
exports.getContainerRegistry = null;
exports.getContainerRegistryOutput = null;
utilities.lazyLoad(exports, ["getContainerRegistry", "getContainerRegistryOutput"], () => require("./getContainerRegistry"));
exports.getDatabase = null;
exports.getDatabaseOutput = null;
utilities.lazyLoad(exports, ["getDatabase", "getDatabaseOutput"], () => require("./getDatabase"));
exports.getDnsDomain = null;
exports.getDnsDomainOutput = null;
utilities.lazyLoad(exports, ["getDnsDomain", "getDnsDomainOutput"], () => require("./getDnsDomain"));
exports.getFirewallGroup = null;
exports.getFirewallGroupOutput = null;
utilities.lazyLoad(exports, ["getFirewallGroup", "getFirewallGroupOutput"], () => require("./getFirewallGroup"));
exports.getInference = null;
exports.getInferenceOutput = null;
utilities.lazyLoad(exports, ["getInference", "getInferenceOutput"], () => require("./getInference"));
exports.getInstance = null;
exports.getInstanceOutput = null;
utilities.lazyLoad(exports, ["getInstance", "getInstanceOutput"], () => require("./getInstance"));
exports.getInstanceIpv4 = null;
exports.getInstanceIpv4Output = null;
utilities.lazyLoad(exports, ["getInstanceIpv4", "getInstanceIpv4Output"], () => require("./getInstanceIpv4"));
exports.getInstances = null;
exports.getInstancesOutput = null;
utilities.lazyLoad(exports, ["getInstances", "getInstancesOutput"], () => require("./getInstances"));
exports.getIsoPrivate = null;
exports.getIsoPrivateOutput = null;
utilities.lazyLoad(exports, ["getIsoPrivate", "getIsoPrivateOutput"], () => require("./getIsoPrivate"));
exports.getIsoPublic = null;
exports.getIsoPublicOutput = null;
utilities.lazyLoad(exports, ["getIsoPublic", "getIsoPublicOutput"], () => require("./getIsoPublic"));
exports.getKubernetes = null;
exports.getKubernetesOutput = null;
utilities.lazyLoad(exports, ["getKubernetes", "getKubernetesOutput"], () => require("./getKubernetes"));
exports.getLoadBalancer = null;
exports.getLoadBalancerOutput = null;
utilities.lazyLoad(exports, ["getLoadBalancer", "getLoadBalancerOutput"], () => require("./getLoadBalancer"));
exports.getObjectStorage = null;
exports.getObjectStorageOutput = null;
utilities.lazyLoad(exports, ["getObjectStorage", "getObjectStorageOutput"], () => require("./getObjectStorage"));
exports.getObjectStorageCluster = null;
exports.getObjectStorageClusterOutput = null;
utilities.lazyLoad(exports, ["getObjectStorageCluster", "getObjectStorageClusterOutput"], () => require("./getObjectStorageCluster"));
exports.getOs = null;
exports.getOsOutput = null;
utilities.lazyLoad(exports, ["getOs", "getOsOutput"], () => require("./getOs"));
exports.getPlan = null;
exports.getPlanOutput = null;
utilities.lazyLoad(exports, ["getPlan", "getPlanOutput"], () => require("./getPlan"));
exports.getRegion = null;
exports.getRegionOutput = null;
utilities.lazyLoad(exports, ["getRegion", "getRegionOutput"], () => require("./getRegion"));
exports.getReservedIp = null;
exports.getReservedIpOutput = null;
utilities.lazyLoad(exports, ["getReservedIp", "getReservedIpOutput"], () => require("./getReservedIp"));
exports.getReverseIpv4 = null;
exports.getReverseIpv4Output = null;
utilities.lazyLoad(exports, ["getReverseIpv4", "getReverseIpv4Output"], () => require("./getReverseIpv4"));
exports.getReverseIpv6 = null;
exports.getReverseIpv6Output = null;
utilities.lazyLoad(exports, ["getReverseIpv6", "getReverseIpv6Output"], () => require("./getReverseIpv6"));
exports.getSnapshot = null;
exports.getSnapshotOutput = null;
utilities.lazyLoad(exports, ["getSnapshot", "getSnapshotOutput"], () => require("./getSnapshot"));
exports.getSshKey = null;
exports.getSshKeyOutput = null;
utilities.lazyLoad(exports, ["getSshKey", "getSshKeyOutput"], () => require("./getSshKey"));
exports.getStartupScript = null;
exports.getStartupScriptOutput = null;
utilities.lazyLoad(exports, ["getStartupScript", "getStartupScriptOutput"], () => require("./getStartupScript"));
exports.getUser = null;
exports.getUserOutput = null;
utilities.lazyLoad(exports, ["getUser", "getUserOutput"], () => require("./getUser"));
exports.getVpc = null;
exports.getVpcOutput = null;
utilities.lazyLoad(exports, ["getVpc", "getVpcOutput"], () => require("./getVpc"));
exports.getVpc2 = null;
exports.getVpc2Output = null;
utilities.lazyLoad(exports, ["getVpc2", "getVpc2Output"], () => require("./getVpc2"));
exports.Inference = null;
utilities.lazyLoad(exports, ["Inference"], () => require("./inference"));
exports.Instance = null;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));
exports.InstanceIpv4 = null;
utilities.lazyLoad(exports, ["InstanceIpv4"], () => require("./instanceIpv4"));
exports.IsoPrivate = null;
utilities.lazyLoad(exports, ["IsoPrivate"], () => require("./isoPrivate"));
exports.Kubernetes = null;
utilities.lazyLoad(exports, ["Kubernetes"], () => require("./kubernetes"));
exports.KubernetesNodePools = null;
utilities.lazyLoad(exports, ["KubernetesNodePools"], () => require("./kubernetesNodePools"));
exports.LoadBalancer = null;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));
exports.ObjectStorage = null;
utilities.lazyLoad(exports, ["ObjectStorage"], () => require("./objectStorage"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.ReservedIp = null;
utilities.lazyLoad(exports, ["ReservedIp"], () => require("./reservedIp"));
exports.ReverseIpv4 = null;
utilities.lazyLoad(exports, ["ReverseIpv4"], () => require("./reverseIpv4"));
exports.ReverseIpv6 = null;
utilities.lazyLoad(exports, ["ReverseIpv6"], () => require("./reverseIpv6"));
exports.Snapshot = null;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));
exports.SnapshotFromUrl = null;
utilities.lazyLoad(exports, ["SnapshotFromUrl"], () => require("./snapshotFromUrl"));
exports.SSHKey = null;
utilities.lazyLoad(exports, ["SSHKey"], () => require("./sshkey"));
exports.StartupScript = null;
utilities.lazyLoad(exports, ["StartupScript"], () => require("./startupScript"));
exports.User = null;
utilities.lazyLoad(exports, ["User"], () => require("./user"));
exports.Vpc = null;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));
exports.Vpc2 = null;
utilities.lazyLoad(exports, ["Vpc2"], () => require("./vpc2"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "vultr:index/bareMetalServer:BareMetalServer":
                return new exports.BareMetalServer(name, undefined, { urn });
            case "vultr:index/blockStorage:BlockStorage":
                return new exports.BlockStorage(name, undefined, { urn });
            case "vultr:index/containerRegistry:ContainerRegistry":
                return new exports.ContainerRegistry(name, undefined, { urn });
            case "vultr:index/database:Database":
                return new exports.Database(name, undefined, { urn });
            case "vultr:index/databaseConnectionPool:DatabaseConnectionPool":
                return new exports.DatabaseConnectionPool(name, undefined, { urn });
            case "vultr:index/databaseDb:DatabaseDb":
                return new exports.DatabaseDb(name, undefined, { urn });
            case "vultr:index/databaseQuota:DatabaseQuota":
                return new exports.DatabaseQuota(name, undefined, { urn });
            case "vultr:index/databaseReplica:DatabaseReplica":
                return new exports.DatabaseReplica(name, undefined, { urn });
            case "vultr:index/databaseTopic:DatabaseTopic":
                return new exports.DatabaseTopic(name, undefined, { urn });
            case "vultr:index/databaseUser:DatabaseUser":
                return new exports.DatabaseUser(name, undefined, { urn });
            case "vultr:index/dnsDomain:DnsDomain":
                return new exports.DnsDomain(name, undefined, { urn });
            case "vultr:index/dnsRecord:DnsRecord":
                return new exports.DnsRecord(name, undefined, { urn });
            case "vultr:index/firewallGroup:FirewallGroup":
                return new exports.FirewallGroup(name, undefined, { urn });
            case "vultr:index/firewallRule:FirewallRule":
                return new exports.FirewallRule(name, undefined, { urn });
            case "vultr:index/inference:Inference":
                return new exports.Inference(name, undefined, { urn });
            case "vultr:index/instance:Instance":
                return new exports.Instance(name, undefined, { urn });
            case "vultr:index/instanceIpv4:InstanceIpv4":
                return new exports.InstanceIpv4(name, undefined, { urn });
            case "vultr:index/isoPrivate:IsoPrivate":
                return new exports.IsoPrivate(name, undefined, { urn });
            case "vultr:index/kubernetes:Kubernetes":
                return new exports.Kubernetes(name, undefined, { urn });
            case "vultr:index/kubernetesNodePools:KubernetesNodePools":
                return new exports.KubernetesNodePools(name, undefined, { urn });
            case "vultr:index/loadBalancer:LoadBalancer":
                return new exports.LoadBalancer(name, undefined, { urn });
            case "vultr:index/objectStorage:ObjectStorage":
                return new exports.ObjectStorage(name, undefined, { urn });
            case "vultr:index/reservedIp:ReservedIp":
                return new exports.ReservedIp(name, undefined, { urn });
            case "vultr:index/reverseIpv4:ReverseIpv4":
                return new exports.ReverseIpv4(name, undefined, { urn });
            case "vultr:index/reverseIpv6:ReverseIpv6":
                return new exports.ReverseIpv6(name, undefined, { urn });
            case "vultr:index/sSHKey:SSHKey":
                return new exports.SSHKey(name, undefined, { urn });
            case "vultr:index/snapshot:Snapshot":
                return new exports.Snapshot(name, undefined, { urn });
            case "vultr:index/snapshotFromUrl:SnapshotFromUrl":
                return new exports.SnapshotFromUrl(name, undefined, { urn });
            case "vultr:index/startupScript:StartupScript":
                return new exports.StartupScript(name, undefined, { urn });
            case "vultr:index/user:User":
                return new exports.User(name, undefined, { urn });
            case "vultr:index/vpc2:Vpc2":
                return new exports.Vpc2(name, undefined, { urn });
            case "vultr:index/vpc:Vpc":
                return new exports.Vpc(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vultr", "index/bareMetalServer", _module);
pulumi.runtime.registerResourceModule("vultr", "index/blockStorage", _module);
pulumi.runtime.registerResourceModule("vultr", "index/containerRegistry", _module);
pulumi.runtime.registerResourceModule("vultr", "index/database", _module);
pulumi.runtime.registerResourceModule("vultr", "index/databaseConnectionPool", _module);
pulumi.runtime.registerResourceModule("vultr", "index/databaseDb", _module);
pulumi.runtime.registerResourceModule("vultr", "index/databaseQuota", _module);
pulumi.runtime.registerResourceModule("vultr", "index/databaseReplica", _module);
pulumi.runtime.registerResourceModule("vultr", "index/databaseTopic", _module);
pulumi.runtime.registerResourceModule("vultr", "index/databaseUser", _module);
pulumi.runtime.registerResourceModule("vultr", "index/dnsDomain", _module);
pulumi.runtime.registerResourceModule("vultr", "index/dnsRecord", _module);
pulumi.runtime.registerResourceModule("vultr", "index/firewallGroup", _module);
pulumi.runtime.registerResourceModule("vultr", "index/firewallRule", _module);
pulumi.runtime.registerResourceModule("vultr", "index/inference", _module);
pulumi.runtime.registerResourceModule("vultr", "index/instance", _module);
pulumi.runtime.registerResourceModule("vultr", "index/instanceIpv4", _module);
pulumi.runtime.registerResourceModule("vultr", "index/isoPrivate", _module);
pulumi.runtime.registerResourceModule("vultr", "index/kubernetes", _module);
pulumi.runtime.registerResourceModule("vultr", "index/kubernetesNodePools", _module);
pulumi.runtime.registerResourceModule("vultr", "index/loadBalancer", _module);
pulumi.runtime.registerResourceModule("vultr", "index/objectStorage", _module);
pulumi.runtime.registerResourceModule("vultr", "index/reservedIp", _module);
pulumi.runtime.registerResourceModule("vultr", "index/reverseIpv4", _module);
pulumi.runtime.registerResourceModule("vultr", "index/reverseIpv6", _module);
pulumi.runtime.registerResourceModule("vultr", "index/sSHKey", _module);
pulumi.runtime.registerResourceModule("vultr", "index/snapshot", _module);
pulumi.runtime.registerResourceModule("vultr", "index/snapshotFromUrl", _module);
pulumi.runtime.registerResourceModule("vultr", "index/startupScript", _module);
pulumi.runtime.registerResourceModule("vultr", "index/user", _module);
pulumi.runtime.registerResourceModule("vultr", "index/vpc", _module);
pulumi.runtime.registerResourceModule("vultr", "index/vpc2", _module);
pulumi.runtime.registerResourcePackage("vultr", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:vultr") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map