import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * List information for Vultr instances.
 *
 * ## Example Usage
 *
 * Get the information for all instances by `status`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const activeInstances = vultr.getInstances({
 *     filters: [{
 *         name: "status",
 *         values: ["active"],
 *     }],
 * });
 * export const instances = activeInstances.then(activeInstances => activeInstances.instances.map(__item => __item.label));
 * ```
 */
export declare function getInstances(args?: GetInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetInstancesResult>;
/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesArgs {
    /**
     * Query parameters for finding instances.
     */
    filters?: inputs.GetInstancesFilter[];
}
/**
 * A collection of values returned by getInstances.
 */
export interface GetInstancesResult {
    readonly filters?: outputs.GetInstancesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The list of instances which individually include the following:
     */
    readonly instances: outputs.GetInstancesInstance[];
}
/**
 * List information for Vultr instances.
 *
 * ## Example Usage
 *
 * Get the information for all instances by `status`:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@pulumi/vultr";
 *
 * const activeInstances = vultr.getInstances({
 *     filters: [{
 *         name: "status",
 *         values: ["active"],
 *     }],
 * });
 * export const instances = activeInstances.then(activeInstances => activeInstances.instances.map(__item => __item.label));
 * ```
 */
export declare function getInstancesOutput(args?: GetInstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstancesResult>;
/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesOutputArgs {
    /**
     * Query parameters for finding instances.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetInstancesFilterArgs>[]>;
}
