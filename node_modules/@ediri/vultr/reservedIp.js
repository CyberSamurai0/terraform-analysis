"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservedIp = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Vultr reserved IP resource. This can be used to create, read, modify, and delete reserved IP addresses on your Vultr account.
 *
 * ## Example Usage
 *
 * Create a new reserved IP:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myReservedIp = new vultr.ReservedIp("myReservedIp", {
 *     ipType: "v4",
 *     label: "my-reserved-ip",
 *     region: "sea",
 * });
 * ```
 *
 * Attach a reserved IP to a instance:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as vultr from "@ediri/vultr";
 *
 * const myReservedIp = new vultr.ReservedIp("myReservedIp", {
 *     instanceId: "b9cc6fad-70b1-40ee-ab6a-4d622858962f",
 *     ipType: "v4",
 *     label: "my-reserved-ip",
 *     region: "sea",
 * });
 * ```
 *
 * ## Import
 *
 * Reserved IPs can be imported using the reserved IP `ID`, e.g.
 *
 * ```sh
 * $ pulumi import vultr:index/reservedIp:ReservedIp my_reserved_ip b9cc6fad-70b1-40ee-ab6a-4d622858962f
 * ```
 */
class ReservedIp extends pulumi.CustomResource {
    /**
     * Get an existing ReservedIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ReservedIp(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ReservedIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReservedIp.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["ipType"] = state ? state.ipType : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["subnetSize"] = state ? state.subnetSize : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.ipType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipType'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["ipType"] = args ? args.ipType : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subnet"] = undefined /*out*/;
            resourceInputs["subnetSize"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReservedIp.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ReservedIp = ReservedIp;
/** @internal */
ReservedIp.__pulumiType = 'vultr:index/reservedIp:ReservedIp';
//# sourceMappingURL=reservedIp.js.map